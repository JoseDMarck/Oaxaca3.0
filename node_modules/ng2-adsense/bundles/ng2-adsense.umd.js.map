{
  "version": 3,
  "file": "ng2-adsense.umd.js",
  "sources": [
    "ng://ng2-adsense/adsense.module.ts",
    "ng://ng2-adsense/adsense.component.ts"
  ],
  "sourcesContent": [
    "import { CommonModule } from '@angular/common';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\n\nimport { AdsenseConfig, ADSENSE_TOKEN } from './adsense-config';\nimport { AdsenseComponent } from './adsense.component';\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [AdsenseComponent],\n  declarations: [AdsenseComponent],\n})\nexport class AdsenseModule {\n  static forRoot(config: Partial<AdsenseConfig> = {}): ModuleWithProviders {\n    return {\n      ngModule: AdsenseModule,\n      providers: [{ provide: ADSENSE_TOKEN, useValue: config }],\n    };\n  }\n}\n",
    "import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  Inject,\n  Input,\n  OnInit,\n} from '@angular/core';\n\nimport { AdsenseConfig, ADSENSE_TOKEN } from './adsense-config';\n\n@Component({\n  selector: 'ng2-adsense,ng-adsense',\n  template: `\n  <ins class=\"adsbygoogle\"\n    [ngStyle]=\"{'display': display, 'width.px': width, 'height.px': height }\"\n    [attr.data-ad-client]=\"adClient\"\n    [attr.data-ad-slot]=\"adSlot\"\n    [attr.data-ad-format]=\"adFormat\"\n    [attr.data-ad-region]=\"adRegion\"\n    [attr.data-layout]=\"layout\"\n    [attr.data-layout-key]=\"layoutKey\">\n  </ins>\n  `,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AdsenseComponent implements OnInit, AfterViewInit {\n  /** adsense account ca-pub-XXXXXXXXXXXXXXXX */\n  @Input() adClient: string;\n  /** ad slot/number */\n  @Input() adSlot: string | number;\n  @Input() adFormat: string;\n  /** can be manually set if you need all ads on a page to have same id page-xxx */\n  @Input() adRegion = 'page-' + Math.floor(Math.random() * 10000) + 1;\n  /** ins element display style */\n  @Input() display: string;\n  /** ins element height in px */\n  @Input() width: number;\n  /** ins element width in px */\n  @Input() height: number;\n  /** used for in-feed ads */\n  @Input() layout: string;\n  /** used for in-feed ads */\n  @Input() layoutKey: string;\n  /** enable page-level ads */\n  @Input() pageLevelAds: boolean;\n  /** on first load sometimes adsense is not ready */\n  @Input() timeOutRetry: number;\n\n  constructor(\n    @Inject(ADSENSE_TOKEN) private config: AdsenseConfig,\n  ) {}\n\n  ngOnInit() {\n    const config = this.config;\n    function use<T>(source: T, defaultValue: any): T {\n      return config && source !== undefined ? source : defaultValue;\n    }\n    this.adClient = use(this.adClient, config.adClient);\n    this.adSlot = use(this.adSlot, config.adSlot);\n    this.adFormat = use(this.adFormat, config.adFormat || 'auto');\n    this.display = use(this.display, config.display || 'block');\n    this.width = use(this.width, config.width);\n    this.height = use(this.height, config.height);\n    this.layout = use(this.layout, config.layout);\n    this.layoutKey = use(this.layoutKey, config.layoutKey);\n    this.pageLevelAds = use(this.pageLevelAds, config.pageLevelAds);\n    this.timeOutRetry = use(this.timeOutRetry, config.timeOutRetry || 200);\n  }\n\n  /**\n   * attempts to push the ad twice. Usually if one doesn't work the other\n   * will depeding on if the browser has the adsense code cached and\n   * if its the first page to be loaded\n   */\n  ngAfterViewInit() {\n    const res = this.push();\n    if (res instanceof TypeError) {\n      setTimeout(() => this.push(), this.timeOutRetry);\n    }\n  }\n\n  push() {\n    const p: any = {};\n    if (this.pageLevelAds) {\n      p.google_ad_client = this.adClient;\n      p.enable_page_level_ads = true;\n    }\n    try {\n      const adsbygoogle = window['adsbygoogle'];\n      adsbygoogle.push(p);\n      return true;\n    } catch (e) {\n      return e;\n    }\n  }\n}\n\n"
  ],
  "names": [
    "CommonModule",
    "NgModule",
    "Input"
  ],
  "mappings": "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"
}
