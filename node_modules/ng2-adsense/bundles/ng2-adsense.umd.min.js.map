{
  "version": 3,
  "file": "ng2-adsense.umd.min.js",
  "sources": [
    "ng://ng2-adsense/adsense.component.ts",
    "ng://ng2-adsense/adsense.module.ts"
  ],
  "sourcesContent": [
    "import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  Inject,\n  Input,\n  OnInit,\n} from '@angular/core';\n\nimport { AdsenseConfig, ADSENSE_TOKEN } from './adsense-config';\n\n@Component({\n  selector: 'ng2-adsense,ng-adsense',\n  template: `\n  <ins class=\"adsbygoogle\"\n    [ngStyle]=\"{'display': display, 'width.px': width, 'height.px': height }\"\n    [attr.data-ad-client]=\"adClient\"\n    [attr.data-ad-slot]=\"adSlot\"\n    [attr.data-ad-format]=\"adFormat\"\n    [attr.data-ad-region]=\"adRegion\"\n    [attr.data-layout]=\"layout\"\n    [attr.data-layout-key]=\"layoutKey\">\n  </ins>\n  `,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AdsenseComponent implements OnInit, AfterViewInit {\n  /** adsense account ca-pub-XXXXXXXXXXXXXXXX */\n  @Input() adClient: string;\n  /** ad slot/number */\n  @Input() adSlot: string | number;\n  @Input() adFormat: string;\n  /** can be manually set if you need all ads on a page to have same id page-xxx */\n  @Input() adRegion = 'page-' + Math.floor(Math.random() * 10000) + 1;\n  /** ins element display style */\n  @Input() display: string;\n  /** ins element height in px */\n  @Input() width: number;\n  /** ins element width in px */\n  @Input() height: number;\n  /** used for in-feed ads */\n  @Input() layout: string;\n  /** used for in-feed ads */\n  @Input() layoutKey: string;\n  /** enable page-level ads */\n  @Input() pageLevelAds: boolean;\n  /** on first load sometimes adsense is not ready */\n  @Input() timeOutRetry: number;\n\n  constructor(\n    @Inject(ADSENSE_TOKEN) private config: AdsenseConfig,\n  ) {}\n\n  ngOnInit() {\n    const config = this.config;\n    function use<T>(source: T, defaultValue: any): T {\n      return config && source !== undefined ? source : defaultValue;\n    }\n    this.adClient = use(this.adClient, config.adClient);\n    this.adSlot = use(this.adSlot, config.adSlot);\n    this.adFormat = use(this.adFormat, config.adFormat || 'auto');\n    this.display = use(this.display, config.display || 'block');\n    this.width = use(this.width, config.width);\n    this.height = use(this.height, config.height);\n    this.layout = use(this.layout, config.layout);\n    this.layoutKey = use(this.layoutKey, config.layoutKey);\n    this.pageLevelAds = use(this.pageLevelAds, config.pageLevelAds);\n    this.timeOutRetry = use(this.timeOutRetry, config.timeOutRetry || 200);\n  }\n\n  /**\n   * attempts to push the ad twice. Usually if one doesn't work the other\n   * will depeding on if the browser has the adsense code cached and\n   * if its the first page to be loaded\n   */\n  ngAfterViewInit() {\n    const res = this.push();\n    if (res instanceof TypeError) {\n      setTimeout(() => this.push(), this.timeOutRetry);\n    }\n  }\n\n  push() {\n    const p: any = {};\n    if (this.pageLevelAds) {\n      p.google_ad_client = this.adClient;\n      p.enable_page_level_ads = true;\n    }\n    try {\n      const adsbygoogle = window['adsbygoogle'];\n      adsbygoogle.push(p);\n      return true;\n    } catch (e) {\n      return e;\n    }\n  }\n}\n\n",
    "import { CommonModule } from '@angular/common';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\n\nimport { AdsenseConfig, ADSENSE_TOKEN } from './adsense-config';\nimport { AdsenseComponent } from './adsense.component';\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [AdsenseComponent],\n  declarations: [AdsenseComponent],\n})\nexport class AdsenseModule {\n  static forRoot(config: Partial<AdsenseConfig> = {}): ModuleWithProviders {\n    return {\n      ngModule: AdsenseModule,\n      providers: [{ provide: ADSENSE_TOKEN, useValue: config }],\n    };\n  }\n}\n"
  ],
  "names": [
    "this",
    "adClient",
    "use",
    "config",
    "adSlot",
    "adFormat",
    "display",
    "width",
    "height",
    "layout",
    "layoutKey",
    "pageLevelAds",
    "timeOutRetry",
    "TypeError",
    "setTimeout",
    "_this",
    "push",
    "p",
    "google_ad_client",
    "enable_page_level_ads",
    "window",
    "e",
    "AdsenseComponent",
    "selector",
    "template",
    "preserveWhitespaces",
    "type",
    "Input",
    "adRegion",
    "AdsenseModule",
    "NgModule",
    "args",
    "imports",
    "CommonModule",
    "exports",
    "declarations"
  ],
  "mappings": "4bA+FA,qGAvCIA,KAAJC,SAAAC,EAAAF,KAAAC,SAAAE,EAAAF,UACAD,KAAAI,OAAAF,EAAAF,KAAAI,OAAAD,EAAAC,QACAJ,KAAAK,SAAAH,EAAAF,KAAAK,SAAAF,EAAAE,UAAA,QACIL,KAAKM,QAATJ,EAAuBF,KAAKM,QAASH,EAArCG,SAAuD,SACnDN,KAAKO,MAATL,EAAqBF,KAAKO,MAAOJ,EAAjCI,OACIP,KAAKQ,OAATN,EAAAF,KAAAQ,OAAAL,EAAAK,QACIR,KAAKS,OAATP,EAAsBF,KAAKS,OAAQN,EAAnCM,QACIT,KAAKU,UAAYR,EAAIF,KAAzBU,UAAAP,EAAAO,WACIV,KAAKW,aAATT,EAAAF,KAAiCW,aAAjCR,EAAAQ,cACIX,KAAKY,aAATV,EAAAF,KAAiCY,aAAjCT,EAAAS,cAAA,8EAWAC,WACAC,WAAA,WAAgB,OAAhBC,EAAAC,QAAAhB,KAAAY,oDAMAZ,KAAAW,eACAM,EAAAC,iBAAAlB,KAAsBC,SACdgB,EAARE,uBAAA,GAEA,IAGM,OAFNC,OAAA,YACAJ,KAAAC,IACA,EAEA,MAAAI,GACA,OAAAA,IAEAC,4CApFAC,SAAA,yBACEC,SAAU,gWACVC,qBAAF,+LAUArB,SAAAsB,KAAAC,EAAAA,QACAtB,WAAAqB,KAAAC,EAAAA,QACAC,WAAAF,KAAAC,EAAAA,QACArB,UAAAoB,KAAAC,EAAAA,+EAyBAjB,YAAAgB,KAAAC,EAAAA,qEAbA,IAAAE,EAAA,WAEA,SAAAA,+GAFA,kBC1BAH,KAAAI,EAAAA,SAAAC,OACAC,SAAAC,EAAAA,cACAC,SAAAZ,GACAa,cAAAb"
}
